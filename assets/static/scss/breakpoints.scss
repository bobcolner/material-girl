// http://www.sitepoint.com/managing-responsive-breakpoints-sass/

// // Defining values

// Foundation breakpoints:
// $small-range:   (0em, 40em);       /* 0, 640px */
// $medium-range:  (40.063em, 64em);  /* 641px, 1024px */
// $large-range:   (64.063em, 90em);  /* 1025px, 1440px */
// $xlarge-range:  (90.063em, 120em); /* 1441px, 1920px */
// $xxlarge-range: (120.063em);       /* 1921px */

$breakpoints: (
  'small'  : '( min-width:  767px )',
  'medium' : '( min-width:  992px )',
  'large'  : '( min-width: 1200px )',
  'complex': '( min-width: 767) and ( max-width: 992px)',
  'super-complex': 'screen and (orientation:landscape) and (min-device-width: 800px)'
);

@mixin respond-to($name, $push: false) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{map-get($breakpoints, $name)} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  // But $push is defined
  @else if $push != false {
    // Add the new breakpoint to the map
    $breakpoints: map-merge($breakpoints, ($name: $push)) !global;
    // And re-call the mixin normally
    @include respond-to($name) {
      @content;
    }
  }
  
  // If the key doesn't exist in the map
  // And there is no push
  @else {
    // Just warn the user
    @warn "Unfortunately, no value could be retrieved from `#{$name}`. "
        + "Please make sure it is defined in `$breakpoints` map. "
        + "Or pass the media query as a second parameter to add it to the map.";
  }
}


// Responsive breakpoint macro: http://sass-guidelin.es/#responsive-web-design-and-breakpoints
/// Responsive manager.
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
$breakpoints: (
  'xs':(min-width: 400px),
  's': (min-width: 700px),
  'm': (min-width: 960px),
  'l': (min-width: 1200px),
  'xl': (min-width: 1600px),
  'dual': (min-width: 800px) and (max-width: 1200px)
);

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}
